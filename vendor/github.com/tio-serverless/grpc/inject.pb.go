// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inject.proto

package tio_control_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InjectRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InjectRequest) Reset()         { *m = InjectRequest{} }
func (m *InjectRequest) String() string { return proto.CompactTextString(m) }
func (*InjectRequest) ProtoMessage()    {}
func (*InjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28dc219aa0c974f7, []int{0}
}

func (m *InjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InjectRequest.Unmarshal(m, b)
}
func (m *InjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InjectRequest.Marshal(b, m, deterministic)
}
func (m *InjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectRequest.Merge(m, src)
}
func (m *InjectRequest) XXX_Size() int {
	return xxx_messageInfo_InjectRequest.Size(m)
}
func (m *InjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InjectRequest proto.InternalMessageInfo

func (m *InjectRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *InjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*InjectRequest)(nil), "InjectRequest")
}

func init() { proto.RegisterFile("inject.proto", fileDescriptor_28dc219aa0c974f7) }

var fileDescriptor_28dc219aa0c974f7 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcc, 0xcb, 0x4a,
	0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0x4e, 0xce, 0xcf, 0x2b, 0x86, 0x72,
	0x94, 0x6c, 0xb9, 0x78, 0x3d, 0xc1, 0x92, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12,
	0x5c, 0xec, 0x89, 0x29, 0x29, 0x45, 0xa9, 0xc5, 0xc5, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x30, 0xae, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x13, 0x58, 0x18, 0xcc, 0x36,
	0xb2, 0x82, 0x69, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xd2, 0xe4, 0xe2, 0xf2, 0x4b,
	0x2d, 0x77, 0x2f, 0x2a, 0x48, 0x0e, 0x2e, 0x2a, 0x13, 0xe2, 0xd3, 0x43, 0x31, 0x5c, 0x8a, 0x53,
	0x2f, 0x24, 0x33, 0x3f, 0x28, 0xb5, 0x20, 0xa7, 0x52, 0x89, 0xc1, 0x49, 0x20, 0x8a, 0xaf, 0x24,
	0x33, 0x5f, 0x2f, 0x39, 0x3f, 0xaf, 0xa4, 0x28, 0x3f, 0x47, 0xaf, 0xcc, 0x30, 0x89, 0x0d, 0xec,
	0x26, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xf0, 0xc2, 0x92, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InjectServiceClient is the client API for InjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InjectServiceClient interface {
	NewGrpcSrv(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*TioReply, error)
}

type injectServiceClient struct {
	cc *grpc.ClientConn
}

func NewInjectServiceClient(cc *grpc.ClientConn) InjectServiceClient {
	return &injectServiceClient{cc}
}

func (c *injectServiceClient) NewGrpcSrv(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*TioReply, error) {
	out := new(TioReply)
	err := c.cc.Invoke(ctx, "/InjectService/NewGrpcSrv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InjectServiceServer is the server API for InjectService service.
type InjectServiceServer interface {
	NewGrpcSrv(context.Context, *InjectRequest) (*TioReply, error)
}

// UnimplementedInjectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInjectServiceServer struct {
}

func (*UnimplementedInjectServiceServer) NewGrpcSrv(ctx context.Context, req *InjectRequest) (*TioReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGrpcSrv not implemented")
}

func RegisterInjectServiceServer(s *grpc.Server, srv InjectServiceServer) {
	s.RegisterService(&_InjectService_serviceDesc, srv)
}

func _InjectService_NewGrpcSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectServiceServer).NewGrpcSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InjectService/NewGrpcSrv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectServiceServer).NewGrpcSrv(ctx, req.(*InjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "InjectService",
	HandlerType: (*InjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGrpcSrv",
			Handler:    _InjectService_NewGrpcSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inject.proto",
}
